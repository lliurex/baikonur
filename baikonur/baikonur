#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#   Copyright 2019, Enrique Medina Gremaldos <quiqueiii@gmail.com>
#
#   GPLv3

import requests
import json
import pyinotify
import time
import datetime
import queue
import debian.deb822 as deb822
import os
import shutil
import tempfile
import glob
import codecs
from celery import Celery

celery = Celery(
        __name__,
        broker="redis://redis_server:6379/0",
        backend="redis://redis_server:6379/0",
        task_routes={"build_package":"sbuild"}
        )

INBOX="/srv/autobuildinbox"
BUILD="/srv/autobuildfolder"
URGENCY={"high":0,"medium":1,"low":2}

incoming_files=queue.Queue()
incoming_packages={}
unknown_files=[]
outgoing_packages=queue.PriorityQueue()

@celery.task(name="build_package")
def build_package(source_name, version_package, build_path, distribution, upstream):
    pass

def run_build(build_path):
    list_changes = glob.glob(os.path.join(build_path,'*.changes'))
    list_baikonur = glob.glob(os.path.join(build_path,'*.baikonur'))
    if len(list_baikonur) > 0:
        changes_file = list_baikonur[0]
    else:
        changes_file = list_changes[0]
    package_description = deb822.Changes(codecs.open(changes_file,encoding='utf-8'))
    source_name = package_description['Source']
    version_package = package_description['Version']
    distribution = package_description['Distribution']
    upstream = package_description['Upstream'] if 'Upstream' in package_description.keys() else None
    build_package.delay(source_name, version_package, build_path, distribution, upstream)

def on_close_file(event):
    
    #not interested in dirs
    if (not event.dir):
        
        #file modified
        if (event.mask==pyinotify.IN_CLOSE_WRITE):
            print(" new file:"+str(event.name))
            incoming_files.put(event.name)

    
def main():
    
    start=datetime.datetime.now()
    
    #preload incoming files
    for file in os.listdir(INBOX):
        if (os.path.isfile(INBOX+"/"+file)):
            incoming_files.put(file)
    
    wm = pyinotify.WatchManager()
    wm.add_watch(INBOX, pyinotify.ALL_EVENTS,proc_fun=on_close_file)
    notifier=pyinotify.Notifier(wm)
    
    trabajo_contador = 0
    while True:
        
        #check for inotify events (waiting 100ms)
        if (notifier.check_events(100)):
            notifier.read_events()
            notifier.process_events()
        
        
        #check for packages
        while (incoming_files.qsize()>0):
            name=incoming_files.get()
            
            #check extension
            if name.endswith(".baikonur"):
                pkg={}
                pkg["files"] = [(name.replace('.baikonur',''),True,"")]
                pkg["urgency"] = 3
                print("* new baikonur package: "+ name )
                incoming_packages[name] = pkg


            elif (name.endswith(".changes")):
                pkg={}
                pkg["files"]=[]
                
                f=codecs.open(INBOX+"/"+name,encoding='utf-8')
                data=deb822.Changes(f)
                f.close()
                
                # punish bad-formatted packages
                pkg["urgency"]=(URGENCY.get(data["Urgency"]) or 3)
                
                for file in data["files"]:
                    pkg["files"].append([file["name"],False,file["md5sum"]])
                
                print("* new package:"+name)
                incoming_packages[name]=pkg
                
            else:
                print("* regular file:"+name)
                unknown_files.append(name)
                
            #build packages
            tmp_packages=[]
            
            for key in incoming_packages:
                pkg=incoming_packages[key]
                size=len(pkg["files"])
                
                for file in pkg["files"]:
                    if (file[1]==True):
                        size=size-1
                    else:
                        if (file[0] in unknown_files):
                            size=size-1
                            unknown_files.remove(file[0])
                            file[1]=True
            
                if (size==0):
                    print("* package is ready:"+key)
                    now=datetime.datetime.now()
                    delta=(now-start).seconds
                    priority=(pkg["urgency"]*10) + (delta//60)

                    folder_temp = tempfile.mkdtemp(dir=BUILD)
                    os.chmod(folder_temp,0o777)
                    for file in pkg['files']:
                        shutil.move(os.path.join(INBOX,file[0]),os.path.join(folder_temp,file[0]))
                    shutil.move(os.path.join(INBOX,key),os.path.join(folder_temp,key))

                    outgoing_packages.put((priority,folder_temp))
                    tmp_packages.append(key)
                    
                    
            for key in tmp_packages:
                incoming_packages.pop(key)

        if outgoing_packages.qsize()>0:
            print(folder_temp)
        #raul part
        if (outgoing_packages.qsize()>0):
            pkg=outgoing_packages.get()
            run_build(os.path.join(INBOX,pkg[1]))
            
        time.sleep(3.0)
        


if __name__ == '__main__':
    main()
